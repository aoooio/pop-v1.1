# Variables à définir au niveau du projet Gitlab, avec l'option "masquée" :
# - AWS_ACCESS_KEY_ID_OPEN      : Identifiant AWS pour les environnements Open
# - AWS_SECRET_ACCESS_KEY_OPEN  : Clé AWS pour les environnements Open
# - AWS_ACCESS_KEY_ID_MC        : Identifiant AWS pour les environnements du Ministère de la Culture
# - AWS_SECRET_ACCESS_KEY_MC    : Clé AWS pour les environnements du Ministère de la Culture
#

default:
  image: node:14.17

stages:
  - node-modules
  - test
  - build
  - deploy
  - staging
  - production

# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: always
#     - if: '$CI_COMMIT_BRANCH == "develop"'
#       when: always
#     - when: never

##############################################################
# TEMPLATES
#

.install-awsebcli: &install-awsebcli
  - pip install awsebcli

.aws-open-credentials: &aws-open-credentials
  - mkdir ~/.aws
  - echo "[eb-cli]" > ~/.aws/credentials
  - echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_OPEN}" >> ~/.aws/credentials
  - echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_OPEN}" >> ~/.aws/credentials

.aws-mc-credentials: &aws-mc-credentials
  - mkdir ~/.aws
  - echo "[default]" > ~/.aws/credentials
  - echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID_MC}" >> ~/.aws/credentials
  - echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_MC}" >> ~/.aws/credentials

# Variables à utiliser avec ce template :
#   - APP : Nom du module applicatif à compiler (api, diffusion, consultation).
#   - ENV : Nom de l'environnement AWS cible.
#   - NAME: Nom de l'application (présent dans le fichier .elasticbeanstalk/config.yml)
#   - REPLACE: Nom de l'application cible AWS
#
.deploy-open: &deploy-open
  stage: deploy
  image: python:3.9
  script:
    - *install-awsebcli
    - *aws-open-credentials
    - cd apps/${APP}
    - sed -i "s/${NAME}/${REPLACE}/" .elasticbeanstalk/config.yml
    - eb deploy ${ENV}

# Variables à utiliser avec ce template :
#   - APP : Nom du module applicatif à compiler (api, diffusion, consultation).
#   - ENV : Nom de l'environnement AWS cible.
#
.deploy-mc: &deploy-mc
  stage: deploy
  image: python:3.9
  script:
    - *install-awsebcli
    - *aws-mc-credentials
    - cd apps/${APP}
    - eb deploy ${ENV}

##############################################################
# NODE-MODULES
#

# Variables à utiliser avec ce template :
#   - APP : Nom du module applicatif à compiler (api, diffusion, consultation).
.node-modules: &node-modules
  stage: node-modules
  script:
    - cd apps/${APP}
    - npm ci
  cache:
    key:
      files:
        - apps/${APP}/package-lock.json
      prefix: node-modules-${APP}
    paths:
      - apps/${APP}/node_modules
    policy: push

node-modules-api:
  <<: *node-modules
  variables:
    APP: api

node-modules-production:
  <<: *node-modules
  variables:
    APP: production

node-modules-diffusion:
  <<: *node-modules
  variables:
    APP: diffusion

##############################################################
# TEST
#

# Variables à utiliser avec ce template :
#   - APP : Nom du module applicatif à compiler (api, diffusion, consultation).
.test: &test
  stage: test
  # Récupération des node_modules en cache pour cette APP
  cache:
    key:
      files:
        - apps/${APP}/package-lock.json
      prefix: node-modules-${APP}
    paths:
      - apps/${APP}/node_modules
    policy: pull
  script:
    - cd apps/${APP}
    - npm test

test-api:
  needs:
    - node-modules-api
  <<: *test
  services:
    - mongo:4.4
  variables:
    APP: api
    DB_ENDPOINT: mongodb://mongo:27017/pop

test-production:
  needs:
    - node-modules-production
  <<: *test
  variables:
    APP: production

test-diffusion:
  needs:
    - node-modules-diffusion
  <<: *test
  variables:
    APP: diffusion

##############################################################
# BUILD
#

# Variables à utiliser avec ce template :
#   - APP : Nom du module applicatif à compiler (api, diffusion, consultation).
#
.pull-cache: &pull-cache # Récupération des node_modules en cache pour cette APP
  cache:
    key:
      files:
        - apps/${APP}/package-lock.json
      prefix: node-modules-${APP}
    paths:
      - apps/${APP}/node_modules
    policy: pull

#
# BUILD PRODUCTION
#

# Variables à utiliser avec ce template :
#   - APP        : Nom du module applicatif à compiler (api, diffusion, consultation).
#   - API_URL    : URL de l'API backend. Ne doit PAS finir par '/'.
#   - BUCKET_URL : URL du bucket S3. DOIT finir par '/'.
#   - NODE_ENV   : Nom de l'environnement cible.
#
.build-production: &build-production
  stage: build
  needs:
    - test-production
  <<: *pull-cache
  script:
    - cd apps/production
    - echo "API_URL=${API_URL}" > .env
    - echo "POP_URL=${POP_URL}" >> .env
    - echo "BUCKET_URL=${BUCKET_URL}" >> .env
    - echo "NODE_ENV=${NODE_ENV}" >> .env
    - npm run build
  artifacts:
    paths:
      - apps/production/*
    exclude: 
      - apps/production/node_modules/
    name: ${CI_JOB_NAME}-${CI_COMMIT_SHORT_SHA}
    expire_in: 7 days

#
# BUILD DIFFUSION
#

# Variables à utiliser avec ce template :
#   - APP        : Nom du module applicatif à compiler (api, diffusion, consultation).
#   - API_URL    : URL de l'API backend. Ne doit PAS finir par /.
#   - POP_URL    : URL de l'interface frontend POP. DOIT finir par /.
#   - BUCKET_URL : URL du bucket S3. DOIT finir par /.
#   - NODE_ENV   : Nom de l'environnement cible.
#
.build-diffusion: &build-diffusion
  stage: build
  needs:
    - test-diffusion
  <<: *pull-cache
  script:
    - cd apps/diffusion
    - echo "API_URL=${API_URL}" > .env
    - echo "POP_URL=${POP_URL}" >> .env
    - echo "BUCKET_URL=${BUCKET_URL}" >> .env
    - echo "NODE_ENV=${NODE_ENV}" >> .env
    - echo "SENTRY_DSN=${SENTRY_DSN}" >> .env
    - npm run build
  artifacts:
    paths:
      - apps/diffusion/*
    exclude: 
      - apps/diffusion/node_modules
    name: ${CI_JOB_NAME}-${CI_COMMIT_SHORT_SHA}
    expire_in: 7 days

##############################################################
# DEVIC1 - OPEN
#

.devic1-rules: &devic1-rules
  rules:
    # - if: '$CI_COMMIT_BRANCH == "develop"'
    #   when: on_success
    - when: manual

build-production-devic1:
  <<: *build-production
  variables:
    APP: production
    API_URL: http://pop-api-devic1.eu-west-3.elasticbeanstalk.com
    POP_URL: http://pop-consultation-devic1.eu-west-3.elasticbeanstalk.com
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/global-open-mc-pop-devic1-phototheque/
    NODE_ENV: devic1
    SENTRY_DSN: https://6fa9dc5ef69b4e5782696405634b1f98@o1104995.ingest.sentry.io/6313039
  <<: *devic1-rules

build-diffusion-devic1:
  <<: *build-diffusion
  variables:
    APP: diffusion
    API_URL: http://pop-api-devic1.eu-west-3.elasticbeanstalk.com
    POP_URL: http://pop-consultation-devic1.eu-west-3.elasticbeanstalk.com/
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/global-open-mc-pop-devic1-phototheque/
    NODE_ENV: devic1
    SENTRY_DSN: https://16d9797f91fc4db89b69afd1da2a2c74@o1104995.ingest.sentry.io/6312721
  <<: *devic1-rules

deploy-api-devic1:
  <<: *deploy-open
  needs:
    - test-api
  variables:
    APP: api
    ENV: pop-api-devic1
    NAME: pop_api
    REPLACE: pop-api
  environment:
    name: pop-api-devic1
    url: http://pop-api-devic1.eu-west-3.elasticbeanstalk.com/
    deployment_tier: development
  <<: *devic1-rules

deploy-production-devic1:
  <<: *deploy-open
  needs:
    - build-production-devic1
  variables:
    APP: production
    ENV: pop-production-devic1
    NAME: pop_production
    REPLACE: pop-production
  environment:
    name: pop-production-devic1
    url: http://pop-production-devic1.eu-west-3.elasticbeanstalk.com/auth/signin
    deployment_tier: development
  <<: *devic1-rules

deploy-diffusion-devic1:
  <<: *deploy-open
  needs:
    - build-diffusion-devic1
  variables:
    APP: diffusion
    ENV: pop-consultation-devic1
    NAME: pop_consultation
    REPLACE: pop-consultation
  environment:
    name: pop-consultation-devic1
    url: http://pop-consultation-devic1.eu-west-3.elasticbeanstalk.com/
    deployment_tier: development
  <<: *devic1-rules

##############################################################
# STAGING - MC
#

build-production-staging:
  <<: *build-production
  variables:
    APP: production
    API_URL: http://pop-api-staging.eu-west-3.elasticbeanstalk.com
    POP_URL: http://pop-consultation-staging.eu-west-3.elasticbeanstalk.com
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/pop-phototeque-staging/
    NODE_ENV: staging
  rules:
    - when: manual

build-diffusion-staging:
  <<: *build-diffusion
  variables:
    APP: diffusion
    API_URL: http://pop-api-staging.eu-west-3.elasticbeanstalk.com
    POP_URL: http://pop-staging.culture.gouv.fr/
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/pop-phototeque-staging/
    NODE_ENV: staging
  rules:
    - when: manual

deploy-api-staging:
  <<: *deploy-mc
  needs:
    - test-api
  variables:
    APP: api
    ENV: pop-api-staging
  stage: staging
  environment:
    name: pop-api-staging
    url: http://pop-api-staging.eu-west-3.elasticbeanstalk.com
    deployment_tier: staging
  when: manual

deploy-production-staging:
  <<: *deploy-mc
  needs:
    - test-production
    - build-production-staging
  variables:
    APP: production
    ENV: pop-production-staging
  stage: staging
  environment:
    name: pop-production-staging
    url: http://pop-production-staging.eu-west-3.elasticbeanstalk.com/
    deployment_tier: staging
  when: manual

deploy-diffusion-staging:
  <<: *deploy-mc
  needs:
    - test-diffusion
    - build-diffusion-staging
  variables:
    APP: diffusion
    ENV: pop-consultation-staging
  stage: staging
  environment:
    name: pop-consultation-staging
    url: http://pop-staging.culture.gouv.fr/
    deployment_tier: staging
  when: manual

##############################################################
# PRODUCTION - MC
#

build-production-production:
  <<: *build-production
  variables:
    APP: production
    API_URL: https://api.pop.culture.gouv.fr
    POP_URL: https://pop.culture.gouv.fr
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/pop-phototeque/
    NODE_ENV: production
  rules:
    - when: manual

build-diffusion-production:
  <<: *build-diffusion
  variables:
    APP: diffusion
    API_URL: https://api.pop.culture.gouv.fr
    POP_URL: https://pop.culture.gouv.fr/
    BUCKET_URL: https://s3.eu-west-3.amazonaws.com/pop-phototeque/
    NODE_ENV: production
  rules:
    - when: manual

deploy-api-production:
  <<: *deploy-mc
  needs:
    - test-api
  variables:
    APP: api
    ENV: pop-api
  stage: production
  environment:
    name: pop-api-production
    url: https://api.pop.culture.gouv.fr/
    deployment_tier: production
  when: manual

deploy-production-production:
  <<: *deploy-mc
  needs:
    - test-production
    - build-production-production
  variables:
    APP: production
    ENV: pop-production
  stage: production
  environment:
    name: pop-production-production
    url: https://production.pop.culture.gouv.fr/
    deployment_tier: production
  when: manual

deploy-diffusion-production:
  <<: *deploy-mc
  needs:
    - test-diffusion
    - build-diffusion-production
  variables:
    APP: diffusion
    ENV: pop-consultation
  stage: production
  environment:
    name: pop-consultation-production
    url: https://www.pop.culture.gouv.fr/
    deployment_tier: production
  when: manual
